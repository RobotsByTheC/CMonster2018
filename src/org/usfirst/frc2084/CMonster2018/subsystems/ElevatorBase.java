// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2084.CMonster2018.subsystems;

import org.usfirst.frc2084.CMonster2018.RobotMap;
import org.usfirst.frc2084.CMonster2018.commands.*;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.Counter;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class ElevatorBase extends Subsystem {
	
	public static WPI_TalonSRX elevatorTalon = RobotMap.elevatorTalon;

	DigitalInput lowerLimitSwitch = new DigitalInput(0); //inputs on the DO ports on the roboRIO
	DigitalInput upperLimitSwitch = new DigitalInput(1);
	Counter lowerCounter = new Counter(lowerLimitSwitch);
	Counter upperCounter = new Counter(upperLimitSwitch);
	
	public static boolean upCheck = false;
	public static boolean atBottom = false;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	
	//limit switch methods
	
	public boolean isLowerSwitchSet() {
		
		return lowerLimitSwitch.get();
		
	}
	
	public boolean IsUpperSwitchSet() {
		return upperCounter.get() > 0;
	}
	
	public void initializeLowerCounter() {
		lowerCounter.reset();
	}
	
	public void initializeUpperCounter() {
		upperCounter.reset();
	}
	
	public void limitSwitchStop() {
		elevatorTalon.set(0);
	}
	
	
	
	
	public void elevatorUpStart() {
		elevatorTalon.set(0.8);
		upCheck = true;
	}
	
	
	public void autoElevatorUpStart() {
		elevatorTalon.set(0.7);
		
	}
	
	public void elevatorUpStop() {
		elevatorTalon.set(0);
	}
	
	public void elevatorDownStart() {
		
		
		if (!this.isLowerSwitchSet()) {
			this.limitSwitchStop();
		}
		else {
			elevatorTalon.set(-0.5);
		}
	
	}
	
	public void elevatorDownStop() {
		elevatorTalon.set(0);
	}
	
	public void stallElevatorStart() {
		elevatorTalon.set(0.1666);
	}
	
	public void stallElevatorStop() {
		elevatorTalon.set(0);
	}

	
		

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

	

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

