// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2084.CMonster2018;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2084.CMonster2018.PID.ElevatorPID;
import org.usfirst.frc2084.CMonster2018.PID.IntakePID;
import org.usfirst.frc2084.CMonster2018.commands.*;
import org.usfirst.frc2084.CMonster2018.subsystems.*;

import com.kauailabs.navx.frc.AHRS;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {
	
    Command autonomousCommand;
  // SendableChooser<Command> chooser = new SendableChooser<>();
   //where you actually select
   
    SendableChooser<String> sideChooser = new SendableChooser<>(); 
    //string that you can get that tells you which sendable chooser option you selected

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveBase driveBase;
    public static ClimberBase climberBase;
    public static ElevatorBase elevatorBase;
    public static IntakeBase intakeBase;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    boolean initCheck = false;
    
	MiddleToRightSwitch middleToRight = new MiddleToRightSwitch();
	MiddleToLeftSwitch middleToLeft = new MiddleToLeftSwitch();
	
	
	
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
   
        RobotMap.init();
        
        initCheck = true;
        SmartDashboard.putBoolean("DidRobotInit?", initCheck);
       
       //elevatorPID.setSetpoint(0);
       //intakePID.setSetpoint(0);
      
        
        //have strings instead so you can compare them later to find out which option you selected
        //programs for the switch
        sideChooser.addObject("RightSwitch", "M");
        sideChooser.addDefault("LeftSwitch", "N");
        sideChooser.addObject("TurnToSwitchFromLeft", "A");
        sideChooser.addObject("TurnToSwitchFromRight", "B");
        
        sideChooser.addObject("FromMiddle", "Y");
        	//auto to start from the middle and go to either side
        
     
        //programs for the scale
      sideChooser.addObject("LeftScaleProgram", "L");
       // sideChooser.addObject("RightScaleProgram", "R");
        
        
        //default and move forward only programs
        sideChooser.addObject("MoveForwardONLY", "F");
        sideChooser.addDefault("Default", "D");  //NEED DEFAULT 
        SmartDashboard.putData("Auto Side", sideChooser);
        
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBase = new DriveBase();
        climberBase = new ClimberBase();
        elevatorBase = new ElevatorBase();
        intakeBase = new IntakeBase();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
      
       CameraServer.getInstance().startAutomaticCapture();
		// starts vision stream to SmartDashboard
        
        
        
            }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
    	Robot.driveBase.DisableDriveBase();
    	Robot.elevatorBase.elevatorUpStop();
    	Robot.elevatorBase.elevatorDownStop();
    	Robot.intakeBase.wheelsIntakeStop();
    	Robot.climberBase.climberDownStop();
    	Robot.climberBase.climberUpStop();

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
    	System.out.println("AutonomousInitRan");
    	this.driveBase.EnableDriveBase();
    	System.out.println("AfterEnableDriveBase");
    	
    	this.driveBase.shiftGearboxBackward();
    	
       String side = sideChooser.getSelected();
        // schedule the autonomous command (example)
       // if (autonomousCommand != null) autonomousCommand.start();
        SmartDashboard.putString("sideCharacter", side);
        
        String gameData;
        
        gameData = DriverStation.getInstance().getGameSpecificMessage();
        //get the data from the fms and assign to a variable
       
        
       
        initCheck = true;
        SmartDashboard.putBoolean("DidAutonomousInit?", initCheck);
    	
    	
        
        //nested if statements
        if(side.equals("M")) {  //leftSwitch
        
        if (gameData.charAt(0) == 'R') {
        	//run one of the command groups to score in the right side of the switch from the middle
        
        	//MiddleToRightSwitch middleToRight = new MiddleToRightSwitch();
        	middleToRight.start();
        	
        }
        
        else if(gameData.charAt(0) == 'L') {
        	
        	//commented out for testing
        	ForwardOnly forwardO = new ForwardOnly();
        	forwardO.start();
        	
        	//ToLeftSwitchFromRight toLeftFromRight = new ToLeftSwitchFromRight();
        	//toLeftFromRight.start();
        }
        }
        
        if (side.equals("N")) { //rightSwitch
        	 if (gameData.charAt(0) == 'L') {
             	//middle slightly to the left position (lined up in front of the left side of the switch)
             	middleToLeft.start();
             	
             }
             
             else if(gameData.charAt(0) == 'R') {
             
             	ForwardOnly forwardO = new ForwardOnly();
             	forwardO.start();
             }
        	
        }
        
        
        
        if(side.equals("L")) { //leftScale
        	if (gameData.charAt(0) == 'L') {
        		//run the command group to score in the left side of the switch from the left
        		LeftToLeftSwitch leftSwitch = new LeftToLeftSwitch();
        		leftSwitch.start();
        	}
        	else if (gameData.charAt(1) == 'L') {
        		//run the command group to score in the left side of the scale
        		LeftToLeftScale leftScale = new LeftToLeftScale();
        		leftScale.start();
        	}
        	else {
        		//run the command group to turn into the loading zone from the left side
        		LeftNotToScale leftNot = new LeftNotToScale();
        		leftNot.start();
        	}
        }
        
        
        if (side.equals("R")) {  //rightScale
        	if (gameData.charAt(0) == 'R') {
        		//run the command group to score in the right side of the switch from the right
        		RightToRightSwitch rightSwitch = new RightToRightSwitch();
        		rightSwitch.start();
        	}
        	else if (gameData.charAt(1) == 'R') {
        		//run the command group to score in the right side of the scale
        		RightToRightScale rightScale = new RightToRightScale();
        		rightScale.start();
        	}
        	else {
        		//run the command group to turn into the loading zone from the right side 
        		RightNotToScale rightNot = new RightNotToScale();
        		rightNot.start();
        	}
        }
        
        
        
        if (side.equals("D")) { //DoNothing
        	DoNothing nothingToDo = new DoNothing();
        	nothingToDo.start();
        		  	
        }
        
       
        if(side.equals("F")) { //ForceForwardOnly
        	MoveForwardOnly forwardOnly = new MoveForwardOnly();
        	forwardOnly.start();
        }
        
        System.out.println("BEFORE IF");
        
        if(side.equals("A")) {  //turnToSwitchFromRight
        	
        	System.out.println("Inside first if");
        	
        	if (gameData.charAt(0) == 'L') {
        		System.out.println("IF");
        	TurnToSwitchFromLeft turnFromLeft = new TurnToSwitchFromLeft(); 
        			turnFromLeft.start();
        			System.out.println("AfterCommand");
        	}
        	
        	else {
        		MoveForwardOnly forward = new MoveForwardOnly() ;
        				forward.start();
        			
        		
        	}
        	
        }
        
        	if(side.equals("B")) { //turnToSwitchFromLeft
        	
        	if (gameData.charAt(0) == 'R') {
        	TurnToSwitchFromRight turnFromRight = new TurnToSwitchFromRight(); 
        			turnFromRight.start();
        	}
        	
        	else {
        		MoveForwardOnly forward = new MoveForwardOnly(); 
        				forward.start();
        			
        		
        	}
        	
        }
        	
        	if (side.equals("Y")) { //Go to either side of the switch from the middle
        		
        		if(gameData.charAt(0) == 'R') {
        			ToRightSwitchFromLeft toRight = new ToRightSwitchFromLeft();
        			toRight.start();
        		}
        		
        		else if(gameData.charAt(0) == 'L') {
        			ToLeftSwitchFromRight toLeft = new ToLeftSwitchFromRight(); 
        					toLeft.start();
        				
        			
        		}
        		
        	}
        
        
        
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
       SmartDashboard.putBoolean("Did MiddleToRight run?", middleToRight.isRunning());
       SmartDashboard.putBoolean("Did MiddleToLeftRun?", middleToLeft.isRunning());
    }

    @Override
    public void teleopInit() {
    	
    	
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        this.driveBase.EnableDriveBase();
        this.driveBase.shiftGearboxBackward();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
       
    }
    
    public void testPeriodic() {
		//LiveWindow.run();
		Robot.driveBase.EnableDriveBase();
		Robot.driveBase.DriveAutonomous();
		SmartDashboard.putNumber("AV Distance", RobotMap.AverageDistance);
	}
    
    
    
   
}
